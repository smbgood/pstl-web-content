Index: src/components/page/checkout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/page/checkout.js	(revision cdc76d92196ecbfaac159ba84231192d7b9a30bc)
+++ src/components/page/checkout.js	(date 1583947196951)
@@ -1,24 +1,30 @@
 import React, { Component } from 'react'
 
-import "../../styles/cart.scss"
+import "../../styles/checkout.scss"
 import {formatPrice} from "../../utils/shared";
 import CartContext from "../widget/cart-context";
 import {FaTrash} from "react-icons/fa"
+import qs from "querystring";
+import axios from "axios";
+import {ErrorMessage, Field, Form, Formik, useFormik} from "formik";
 
 class Checkout extends Component {
 
     state = {
         stripe: null,
+        orderId: "",
+        ableToValidateAddress: ""
     }
     componentDidMount() {
         /*const stripe = window.Stripe("pk_live_OGxNOUzWvpoUJS3yscyZ6Ccw00ukIopzD4")*/
         const stripe = window.Stripe("pk_test_4xqQzlAyU2e9MJ2h9P1SapFe00K4jXy6Rk")
-        this.setState({ stripe })
+        const orderId = this.createOrderId()
+        this.setState({ stripe: stripe, orderId: orderId })
     }
 
     doOutput(item, cart){
         return (
-            <div className={"cart-row-item"}>
+            <div key={item.name + "-cart-item"} className={"cart-row-item"}>
                 <div className={"cart-left"}>{item.name}</div>
                 <div className={"cart-mid"}>{item.qty}</div>
                 <div className={"cart-right"}>{formatPrice(item.price, item.currency)}</div>
@@ -40,8 +46,9 @@
         const { error } = await stripe.redirectToCheckout({
             items: outItems,
             successUrl: `https://www.bansheebabe.com/page-2/`,
-            cancelUrl: `https://www.bansheebabe.com/shope/cart`,
+            cancelUrl: `https://www.bansheebabe.com/shope/checkout`,
             billingAddressCollection:`required`,
+            clientReferenceId: this.state.orderId,
         })
 
         if (error) {
@@ -70,6 +77,77 @@
     }
 
     render() {
+        const formik = useFormik({
+            initialValues: { firstname: '', lastname: '', email: '', addresslineone: '', addresslinetwo: '', city: '', state: '', country:'', zip:'', message: '', addressValid: null },
+            validate: values => {
+                const errors = {};
+                if (!values.email) {
+                    errors.email = 'Email required';
+                }else if (
+                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)
+                ) {
+                    errors.email = 'Invalid email address';
+                }
+
+                if(!values.firstname){
+                    errors.firstname = 'Please enter your first name';
+                }
+                if(!values.addresslineone){
+                    errors.addresslineone = 'Please enter an address to ship to'
+                }
+                if(!values.city){
+                    errors.city  = 'Please enter a city'
+                }
+                if(!values.state){
+                    errors.state = 'Please enter a state'
+                }
+                if(!values.zip){
+                    errors.zip = 'Please enter a zip code'
+                }
+                if(!values.country){
+                    errors.country = 'Please enter a country'
+                }
+                return errors;
+            },
+            onSubmit: (values, { setSubmitting }) => {
+                //validate address before we allow submit:
+                let addressValues = {}
+                addressValues["name"] = values["firstname"]
+                addressValues["street1"] = values["addresslineone"]
+                addressValues["city"] = values["city"]
+                addressValues["state"] = values["state"]
+                addressValues["zip"] = parseInt(values["zip"])
+                addressValues["country"] = values["country"]
+                addressValues["validate"] = true
+                //addressValues = qs.stringify(addressValues)
+
+                axios.post("https://api.goshippo.com/addresses/", addressValues,
+                    {headers:  {"Authorization" : "ShippoToken shippo_test_a1adaa649465898a6b73cc83fadfc1eb9b0faec9",
+                            "Content-Type": "application/json"}} ).then(response => {
+                    if(response && response.data){
+                        let validationResult = response.data["validation_results"]
+                        if(validationResult){
+                            let isValid = validationResult["is_valid"] === true
+                            if(isValid === true) {
+                                values["form-name"] = "bborder"
+                                values = qs.stringify(values)
+                                axios.post("/orderinfo", values, {headers: {'Content-Type': 'application/x-www-form-urlencoded'}})
+                                    .then(response => {
+                                        this.doCheckout(cart.cart, this.state.stripe)
+                                    }).catch(error => {
+                                    console.log("Error with order form submit: " + error)
+                                })
+                            }
+                            setSubmitting(false);
+                        }
+                    }
+
+                }).catch(error => {
+                    console.log(error)
+                    setSubmitting(false);
+                })
+            },
+        })
         return (
             <CartContext.Consumer>
                 {cart => (
@@ -86,15 +164,78 @@
                                 item != null && item.qty > 0 ? this.doOutput(item, cart) : ""
                             ))}
 
+                            {this.doShippingTotal(cart.cart)}
+
                             {this.doTotal(cart.cart)}
 
-                            {cart.cart.length > 0 ? <button className={"checkout-cart-page-btn"} onClick={() => {this.doCheckout(cart.cart, this.state.stripe)}}>Checkout</button> : ""}
+                            <form name="bborder" data-netlify="true" netlify-honeypot="bot-field" method="post" onSubmit={formik.handleSubmit} >
+                                <input type="hidden" name="bot-field"/>
+                                <input type="hidden" name="form-name" value="bborder"/>
+                                <input type="hidden" name="stripe-order-id" value={this.state.orderId}/>
+                                <h3 className={"form-heading-shipping"}>Shipping Address</h3>
+                                <h4 className={"form-subheading-shipping"}>(US and Canada only, please)</h4>
+                                <input id="firstname" name="firstname" type="text" placeholder="Name" onChange={formik.handleChange} value={formik.values.firstname}/>
+                                {formik.errors.firstname ? <div className={"form-error-msg"}>{formik.errors.firstname}</div> : ""}
+                                {/*<ErrorMessage name="firstname" render={msg => }/>
+                                <Field type="email" name="email" placeholder="Email" />
+                                <ErrorMessage name="email" render={msg => <div className={"form-error-msg"}>{msg}</div>} />
+                                <br/>
+                                <Field name="addresslineone" placeholder="Address 1"/>
+                                <ErrorMessage name="addresslineone" render={msg => <div className={"form-error-msg"}>{msg}</div>}/>
+                                <br/>
+                                <Field name="addresslinetwo" placeholder="Address 2"/>
+                                <ErrorMessage name="addresslinetwo" render={msg => <div className={"form-error-msg"}>{msg}</div>}/>
+                                <br/>
+                                <Field name="city" placeholder="City"/>
+                                <ErrorMessage name="city" render={msg => <div className={"form-error-msg"}>{msg}</div>}/>
+                                <Field name="state" placeholder="State"/>
+                                <ErrorMessage name="state" render={msg => <div className={"form-error-msg"}>{msg}</div>}/>
+                                <br/>
+                                <Field name="zip" placeholder="Zip"/>
+                                <ErrorMessage name="zip" render={msg => <div className={"form-error-msg"}>{msg}</div>}/>
+                                <br/>
+                                <Field name="country" placeholder="Country"/>
+                                <ErrorMessage name="country" render={msg => <div className={"form-error-msg"}>{msg}</div>}/>
+                                <br/>
+                                <Field name="message" component="textarea" placeholder="Message" />
+                                <ErrorMessage name="message" render={msg => <div className={"form-error-msg"}>{msg}</div>} />
+                                <br/>*/}
+                                <button className="order-form-submit" type="submit">
+                                    Submit
+                                </button>
+                            </form>
 
+                            {this.showValidatedAddressField(cart.ableToValidateAddress)}
                         </div> : ""
                 )}
             </CartContext.Consumer>
         )
     }
+
+    showValidatedAddressField(value){
+        /*return this.state.ableToValidateAddress != null ?
+            (this.state.ableToValidateAddress ? "true" :
+                    <div className={"invalid-address-shipping"}>Could not validate address entered. Please check and try again</div>
+            ) :
+            "null"*/
+        if(value){
+            if(value === true)
+                return (<div>true</div>)
+            else{
+                return (<div>false</div>)
+            }
+        }else{
+            return (<div>undefined</div>)
+        }
+    }
+
+    doShippingTotal(cart) {
+
+    }
+
+    createOrderId() {
+        return 'order_' + Math.random().toString(36).substr(2, 9);
+    }
 }
 
 export default Checkout
\ No newline at end of file
